
(define (m-eval exp env)
  (cond ((self-eval? exp) exp)
	((variable? exp) (lookup-variable exp env))
	((quoted? exp) (text-of-quote exp))
	((assignment? exp) (eval-assignment exp env))
	((definition? exp) (eval-definition exp env))
	((if? exp) (eval-if exp env))
	((lambda? exp)
	 (make-procedure (lambda-paramaters exp)
			 (lambda-body exp) env))
	((begin? exp)
	 (eval-sequence exp env))
	((cond? exp) (eval (cond->if exp) env))
	((application? exp)
	 (m-apply (eval (operator exp) env)
		  (list-of-values (operands exp) env)))
	
	(else (error "Unable to Evaluate " exp))))



(define (m-apply procedure arguments)
  (cond ((primitive-procedure? procedure)
	 (apply-primitive-procedure procedure arguments))
	((compond-procedure? procedure)
	 (eval-sequence (procedure-body procedure)
			(extend-enviornment (procedure-parameters procedure) arguments)))
	(else (error "Unknown Procedure type-- Apply" procedure))))

(define (begin? exp)  (tagged-list? exp 'begin))
(define (cond? exp) (tagged-list? exp 'cond))
(define (definition? exp) (tagged-list? exp 'define))
(define (if? exp) (tagged-list? exp 'if))
(define (lambda? exp) (tagged-list? exp 'lambda))
(define (assignment? exp)  (tagged-list? exp 'set!))
(define (self-eval? exp) (or (number? exp) (string? exp)))

(define (quoted? exp) (tagged-list? exp 'quote))
(define (text-of-quote exp) (cadr exp))

(define (variable? exp) (symbol? exp))


(define (assignment-variable exp)
  (cadr exp))
(define (assignment-value exp)
  (caddr exp))
(define (eval-assignment exp env)
  (display exp) (display env)
  (set!-variable-value (assignment-variable exp)
		       (m-eval (assignment-value exp) env)
		       env)
  'ok)
(define (set!-variable-value var val env)
  (define (env-loop env)
    (define (scan pairs)
      (cond ((null? pairs)
	     (env-loop (enclosing-environment env)))
	    ((eq? (pair-var (car pairs)) var)
	     (set-cdr! (car pairs) val) env)
	    (else (scan (cdr pairs)))))
    (if (eq? the-empty-environment env)
	(error "Unbound Variable " var)
	(scan (first-frame env))))
  (env-loop env))

(define (lookup-variable var env)
  (define (env-loop env)
    (define (scan pairs)
      (if (null? pairs)
	  (env-loop (enclosing-environment env))
	  (let
	      ((pair (car pairs))
	       (rest (cdr pairs)))
	    (if (eq? (pair-var pair) var)
		(pair-val pair)
		(scan rest)))))   
    (if (eq? env the-empty-environment)
	(error "Unbound Variable" var)
	(let ((frame (first-frame env)))
	  (scan frame))))
  (env-loop env))

(define (enclosing-environment env) (cdr env))
(define (first-frame env)(car env))
(define (pair-var pair) (car pair))
(define (pair-val pair) (cdr pair))
(define the-empty-environment '())

(define (tagged-list? list tag)
  (if (pair? list)
      (eq? (car list) tag)
      (false)))

